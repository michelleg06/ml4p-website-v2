eligible_students <- eligible_students %>%
filter(study_level == "Master's degree" | study_level == "Bachelor's degree" | (maastricht_uni == 1))
# print sorted nationalities by freq.
sorted_nationalities <- sort(table(eligible_students$nationality, useNA = "ifany"), decreasing = TRUE)
print(sorted_nationalities)
# Gender
eligible_students$gender <- as_factor(eligible_students$gender)
table(eligible_students$gender)
eligible_students <- eligible_students %>%
filter(!nchar(brief_title) < 25)
### Partners
partner_unis <- c("moi university", "university of cape coast", "universidad eafit")
preselected_indonesia <- c("roihanarifin17@gmail.com", "wandrawrw09@gmail.com", "pencu.rian4@gmail.com", "syarifhazzhr@gmail.com", "rrahmadaniekaputri@gmail.com", "nshasibuan0909@gmail.com", "larasatidamarnastiti@gmail.com", "rimarasifah@gmail.com", "mfikrivalaguna@gmail.com", "radisaokta@gmail.com", "suminijasrijal@gmail.com", "fbrillyandra88@gmail.com", "muflihulfadhil2002@gmail.com", "yusra.koto@gmail.com")
eligible_students <- eligible_students %>%
mutate(preselected = ifelse(university %in% partner_unis | email %in% preselected_indonesia | maastricht_uni == 1 | mpp == 1, 1, 0))
# for course application
eligible_students <- eligible_students %>% select(first_name, last_name, email, nationality, continent, global_north, gender, age, university, study_level, programme, brief_title, group_time, mpp, maastricht_uni, preselected)
write.csv(eligible_students, "~/Downloads/policy_brief_eligible_students.csv", row.names = FALSE)
# for CDO newsletter
data$Q11 <- as_factor(data$Q11)
table(data$Q11)
for_cdo_newsletter <- data %>%
filter(Q11 == "Yes")
for_cdo_newsletter <- for_cdo_newsletter %>% select(first_name, last_name, email, gender, age, nationality, study_level, study_level_other)
write.csv(for_cdo_newsletter, "~/Downloads/for_cdo_newsletter.csv", row.names = FALSE)
# for course application
eligible_students <- eligible_students %>% select(first_name, last_name, email, nationality, eu, gender, age, university, study_level, programme, programming_skills, python_notebook, research_keywords, mpp, maastricht_uni)
write.csv(eligible_students, "~/Downloads/nec4p_eligible_students.csv", row.names = FALSE, fileEncoding = "UTF-16LE")
# for course application
eligible_students <- eligible_students %>% select(first_name, last_name, email, nationality, continent, global_north, gender, age, university, study_level, programme, brief_title, group_time, mpp, maastricht_uni, preselected)
write.csv(eligible_students, "~/Downloads/policy_brief_eligible_students.csv", row.names = FALSE, fileEncoding = "UTF-16LE")
non_unis_obs <- eligible_students %>%
filter(university %in% non_unis)
### Filter non universities
non_unis <- c("na", "n/a", "none", "-", ".")
non_unis_obs <- eligible_students %>%
filter(university %in% non_unis)
View(non_unis_obs)
table(eligible_students$global_north)
table(eligible_students$study_level)
table(data$study_level)
table(eligible_students$group_time)
setwd("/Users/lucas/Documents/UNU-CDO/courses/intercultural-competences")
library(haven)
library(tidyverse)
library(stringdist)
data <- read_sav("Improving team work through intercultural communication_March 27, 2025_12.50.sav", encoding = "UTF-8")
#rename important columns
data <- data %>% rename(
first_name = Q1_1,
last_name = Q1_2,
email = Q2_2,
gender = Q4,
age = Q19_1,
university = Q_1,
study_level = Q5,
programme = Q6_1,
study_level_other = Q5_9_TEXT,
nationality = Q3,
group_time = Q8,
brief_title = Q9
)
#rename important columns
data <- data %>% rename(
first_name = Q1_1,
last_name = Q1_2,
email = Q2_2,
gender = Q4,
age = Q19_1,
university = Q_1,
study_level = Q5,
programme = Q6_1,
study_level_other = Q5_9_TEXT,
nationality = Q3,
application_reason = Q8,
previous_experiences = Q27,
location = Q26
)
data$gender <- as_factor(data$gender)
data$nationality <- as_factor(data$nationality)
# Remove incomplete applications
data <- data %>%
filter(Progress == 100)
data <- data %>%
distinct(email, .keep_all = TRUE)
data <- data %>%
distinct(email, .keep_all = TRUE)
# print sorted nationalities by freq.
sorted_table <- sort(table(data$nationality, useNA = "ifany"), decreasing = TRUE)
print(sorted_table)
africa <- c(
"Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi", "Cape Verde", "Cameroon",
"Central African Republic", "Chad", "Comoros", "Democratic Republic of the Congo", "Djibouti", "Equatorial Guinea", "Eritrea", "Swaziland", "Ethiopia", "Gabon", "Gambia", "Ghana",
"Guinea", "Guinea-Bissau", "Côte d'Ivoire", "Kenya", "Lesotho", "Liberia", "Libyan Arab Jamahiriya", "Madagascar",
"Malawi", "Mali", "Mauritania", "Mauritius", "Morocco", "Mozambique", "Namibia", "Niger",
"Nigeria", "Congo, Republic of the...", "Rwanda", "São Tomé and Príncipe", "Senegal", "Seychelles",
"Sierra Leone", "Somalia", "South Africa", "South Sudan", "Sudan", "United Republic of Tanzania", "Togo", "Tunisia",
"Uganda", "Zambia", "Zimbabwe"
)
europe <- c(
"Albania", "Andorra", "Austria", "Belarus", "Belgium", "Bosnia and Herzegovina", "Bulgaria",
"Croatia", "Czech Republic", "Denmark", "Estonia", "Finland", "France", "Germany",
"Greece", "Hungary", "Iceland", "Ireland", "Italy", "Kosovo", "Latvia", "Liechtenstein",
"Lithuania", "Luxembourg", "Malta", "Republic of Moldova", "Monaco", "Montenegro", "Netherlands",
"North Macedonia", "Norway", "Poland", "Portugal", "Romania", "Russian Federation", "San Marino",
"Serbia", "Slovakia", "Slovenia", "Spain", "Sweden", "Switzerland", "Ukraine",
"United Kingdom of Great Britain and Northern Ireland", "Vatican City"
)
eeuu_canada_puerto_rico <- c(
"United States of America", "Canada", "Puerto Rico"
)
oceania <- c(
"Australia", "Fiji", "Kiribati", "Marshall Islands", "Micronesia", "Nauru", "New Zealand",
"Palau", "Papua New Guinea", "Samoa", "Solomon Islands", "Tonga", "Tuvalu", "Vanuatu"
)
asia <- c(
"Afghanistan", "Armenia", "Azerbaijan", "Bangladesh", "Bhutan", "Brunei", "Cambodia",
"China", "Georgia", "India", "Indonesia", "Japan",
"Kazakhstan", "Kyrgyzstan", "Laos", "Malaysia", "Maldives", "Mongolia",
"Myanmar", "Nepal", "North Korea", "Pakistan", "Philippines", "Singapore", "South Korea", "Sri Lanka", "Tajikistan", "Thailand",
"Timor-Leste", "Turkmenistan", "Uzbekistan", "Viet Nam"
)
middle_east <- c("Iraq", "Israel", "Syrian Arab Republic", "Palestina", "Qatar", "United Arab Emirates",
"Yemen", "Lebanon", "Saudi Arabia", "Kuwait", "Jordan", "Iran", "Egypt", "Oman", "Turkey", "Bahrain",  "Cyprus")
south_america <- c(
"Argentina", "Bolivia", "Brazil", "Chile", "Colombia", "Ecuador", "Guyana", "Paraguay",
"Peru", "Suriname", "Uruguay", "Venezuela, Bolivarian Republic of..."
)
central_america_caribean_and_mexico <- c(
"Antigua and Barbuda", "Bahamas", "Barbados", "Belize", "Costa Rica", "Cuba", "Dominica",
"Dominican Republic", "El Salvador", "Grenada", "Guatemala", "Haiti", "Honduras", "Jamaica",
"Mexico", "Nicaragua", "Panama", "Saint Kitts and Nevis", "Saint Lucia",
"Saint Vincent and the Grenadines", "Trinidad and Tobago"
)
global_north <- c(
"Albania", "Andorra", "Austria", "Belarus", "Belgium", "Bosnia and Herzegovina", "Bulgaria",
"Croatia", "Czech Republic", "Denmark", "Estonia", "Finland", "France", "Germany",
"Greece", "Hungary", "Iceland", "Ireland", "Italy", "Kosovo", "Latvia", "Liechtenstein",
"Lithuania", "Luxembourg", "Malta", "Republic of Moldova", "Monaco", "Montenegro", "Netherlands",
"North Macedonia", "Norway", "Poland", "Portugal", "Romania", "Russian Federation", "San Marino",
"Serbia", "Slovakia", "Slovenia", "Spain", "Sweden", "Switzerland", "Ukraine",
"United Kingdom of Great Britain and Northern Ireland", "Vatican City", "Israel", "South Korea", "Japan", "China", "New Zealand", "Australia"
)
# continent
data <- data %>%
mutate(continent = case_when(
nationality %in% africa ~ "Africa",
nationality %in% europe ~ "Europe",
nationality %in% eeuu_canada_puerto_rico ~ "EEUU_Canada_Puerto_Rico",
nationality %in% oceania ~ "Oceania",
nationality %in% asia ~ "Asia",
nationality %in% south_america ~ "South America",
nationality %in% central_america_caribean_and_mexico ~ "Central America, Caribbean, and Mexico",
nationality %in% middle_east ~ "Middle East",
TRUE ~ "Unknown"
))
table(data$continent)
###### Eligible students
data$study_level <- as_factor(data$study_level)
table(data$study_level)
eligible_students <- data
### Maastricht uni
maas_uni_mapping <- c("maastricht", "maastricht university", "unu-merit", "unu merit")
eligible_students <- eligible_students %>%
mutate(university = tolower(university)) %>%
rowwise() %>%
mutate(maastricht_uni = any(str_detect(university, maas_uni_mapping)) | str_detect(email, "maastricht")) %>%
ungroup()
table(eligible_students$maastricht_uni)
####MPP
mpp_mapping <- c("mpp", "public policy", "pubic policy")
# mpp == 1 if maastricht && programme name matches mapping
eligible_students <- eligible_students %>%
mutate(programme = tolower(programme)) %>%
rowwise() %>%
mutate(mpp = if_else(maastricht_uni == 1,
any(str_detect(programme, mpp_mapping)),
FALSE)) %>%
ungroup()
table(eligible_students$mpp)
### Filter non universities
non_unis <- c("na", "n/a", "none", "-", ".")
non_unis_obs <- eligible_students %>%
filter(university %in% non_unis)
eligible_students <- eligible_students %>%
filter(study_level != "Other (please specify)")
table(eligible_students$continent)
# print sorted nationalities by freq.
sorted_nationalities <- sort(table(eligible_students$nationality, useNA = "ifany"), decreasing = TRUE)
print(sorted_nationalities)
data <- read.csv("tax_land_cover_data.csv", header = TRUE)
ownload
setwd("/Users/lucas/Downloads")
setwd("/Users/lucas/Downloads")
data <- read.csv("tax_land_cover_data.csv", header = TRUE)
summary(data$year)
summary(data$effective_tax_collected)
$year)
table(data$year)
data <- read.csv("tax_land_cover_data.csv", header = TRUE)
table(data$year)
View(data)
setwd("/Users/lucas/Documents/UNU-CDO/courses/serdar/applications")
library(haven)
library(tidyverse)
library(stringdist)
data <- read_sav("Literature Review - Serdar_January 31, 2025_10.37.sav")
#rename important columns
data <- data %>% rename(
first_name = Q1_1,
last_name = Q1_2,
email = Q2_2,
gender = Q4,
age = Q19_1,
university = Q_1,
study_level = Q5,
programme = Q6_1,
study_level_other = Q5_9_TEXT
)
data$gender <- as_factor(data$gender)
# Remove incomplete applications
data <- data %>%
filter(Progress == 100)
# Convert nationality to lowercase to standarize
data <- data %>%
mutate(Q3_1 = tolower(Q3_1))
# Define a reference list of country names
countries <- c(
"dutch","afghanistan", "albania", "algeria", "andorra", "angola", "antigua and barbuda", "argentina", "armenia",
"australia", "austria", "azerbaijan", "bahamas", "bahrain", "bangladesh", "barbados", "belarus", "belgium",
"belize", "benin", "bhutan", "bolivia", "bosnia and herzegovina", "botswana", "brazil", "brunei",
"bulgaria", "burkina faso", "burundi", "cabo verde", "cambodia", "cameroon", "canada", "central african republic",
"chad", "chile", "china", "colombia", "comoros", "congo", "costa rica", "croatia", "cuba", "cyprus",
"czechia", "denmark", "djibouti", "dominica", "dominican republic", "ecuador", "egypt", "el salvador",
"equatorial guinea", "eritrea", "estonia", "eswatini", "ethiopia", "fiji", "finland", "france",
"gabon", "gambia", "georgia", "germany", "ghana", "greece", "grenada", "guatemala", "guinea",
"guinea-bissau", "guyana", "haiti", "honduras", "hungary", "iceland", "india", "indonesia",
"iran", "iraq", "ireland", "israel", "italy", "jamaica", "japan", "jordan", "kazakhstan", "kenya",
"kiribati", "korea (north)", "korea (south)", "kosovo", "kuwait", "kyrgyzstan", "laos", "latvia",
"lebanon", "lesotho", "liberia", "libya", "liechtenstein", "lithuania", "luxembourg", "madagascar",
"malawi", "malaysia", "maldives", "mali", "malta", "marshall islands", "mauritania", "mauritius",
"mexico", "micronesia", "moldova", "monaco", "mongolia", "montenegro", "morocco", "mozambique",
"myanmar", "namibia", "nauru", "nepal", "netherlands", "new zealand", "nicaragua", "niger",
"nigeria", "north macedonia", "norway", "oman", "pakistan", "palau", "panama", "papua new guinea",
"paraguay", "peru", "philippines", "filipino", "poland", "portugal", "qatar", "romania", "russia", "rwanda",
"saint kitts and nevis", "saint lucia", "saint vincent and the grenadines", "samoa", "san marino",
"sao tome and principe", "saudi arabia", "senegal", "serbia", "seychelles", "sierra leone",
"singapore", "slovakia", "slovenia", "solomon islands", "somalia", "south africa", "spain",
"sri lanka", "sudan", "suriname", "sweden", "switzerland", "syria", "tajikistan", "tanzania",
"thailand", "timor-leste", "togo", "tonga", "trinidad and tobago", "tunisia", "turkey",
"turkmenistan", "tuvalu", "uganda", "ukraine", "united arab emirates", "united kingdom", "united states","us", "usa", "uk", "uae",
"uruguay", "uzbekistan", "vanuatu", "vatican city", "venezuela", "vietnam", "yemen", "zambia", "zimbabwe"
)
eu_countries <- c(
"austria", "belgium", "bulgaria", "croatia", "cyprus",
"czech republic", "denmark", "estonia", "finland", "france",
"germany", "greece", "hungary", "ireland", "italy",
"latvia", "lithuania", "luxembourg", "malta", "netherlands",
"poland", "portugal", "romania", "slovakia", "slovenia",
"spain", "sweden", "united kingdom"
)
# remove observations with invalid nationality
data <- data %>%
filter(nchar(Q3_1) > 3 | Q3_1 %in% c("us", "uk", "usa", "uae"))
# Define a mapping for specific conversions
manual_mapping <- c("filipino" = "philippines", "dutch/mexican" = "netherlands", "dutch" = "netherlands", "british" = "united kingdom", "us" = "united states", "uk" = "united kingdom", "uae" = "united arab emirates", "usa" = "united states")
# Create a function to standardize nationalities
standardize_nationality <- function(x) {
# Convert input to lowercase for consistent matching
x <- tolower(trimws(x))
# First check manual mapping
if (x %in% names(manual_mapping)) {
return(manual_mapping[x])
}
# Then find closest match in countries list
closest_match <- countries[which.min(stringdist(x, countries))]
return(closest_match)
}
# Apply the standardization to the nationality column
data$nationality <- sapply(data$Q3_1, standardize_nationality)
table(data$Q3_1)
table(data$nationality, useNA = "ifany")
table(data$study_level)
############# TEST
nationality_comparison <- data.frame(
original = data$Q3_1,
processed = data$nationality,
distance = stringdist(data$Q3_1, data$nationality, method = "lv")
) %>%
# Calculate normalized distance (to account for string length)
mutate(
norm_distance = distance / (nchar(original) + nchar(processed)),
# Keep original row numbers for reference
row_num = row_number()
) %>%
# Sort by distance in descending order
arrange(desc(distance))
# Show top 20 most different pairs
head(nationality_comparison, 60) %>%
# Format as a nice table
knitr::kable(
col.names = c(
"Original (Q3_1)",
"Processed (nationality)",
"Levenshtein Distance",
"Normalized Distance",
"Row Number"
),
digits = 3
)
# print sorted nationalities by freq.
sorted_table <- sort(table(data$nationality, useNA = "ifany"), decreasing = TRUE)
print(sorted_table)
#EU and non EU
data <- data %>%
mutate(eu = ifelse(nationality %in% eu_countries, 1, 0))
table(data$eu)
### Combine SDG's
#replace 1 with column name fetched with [cur_column], then replace the Q20_ part to only have the sdg number
data <- data %>%
mutate(across(Q20_1:Q20_17, ~ ifelse(. == 1, str_replace(cur_column(), "Q20_", ""), NA)))
# combine all columns into one
data <- data %>%
unite("sdgs", Q20_1:Q20_17, sep = " ", na.rm = TRUE)
### Combine Keywords
data <- data %>%
unite("research_keywords", Q21_1:Q21_3, sep = ", ", na.rm = TRUE)
#### Selected students
data$study_level <- as_factor(data$study_level)
table(data$study_level)
eligible_students <- data %>%
filter(study_level == "Master's degree" | (nationality == "netherlands" & study_level != "Other (please specify)"))
setwd("/Users/lucas/Documents/UNU-CDO/courses/emanuele - nec4p")
data <- read_sav("NEC4P - Emanuele_February 14, 2025_14.53.sav", encoding = "UTF-8")
#rename important columns
data <- data %>% rename(
first_name = Q1_1,
last_name = Q1_2,
email = Q2_2,
gender = Q4,
age = Q5_1,
university = Q6_1,
study_level = Q7,
programme = Q8_1,
study_level_other = Q7_9_TEXT,
nationality = Q3,
programming_skills = Q11,
python_notebook = Q12
)
data$gender <- as_factor(data$gender)
data$nationality <- as_factor(data$nationality)
data$programming_skills <- as_factor(data$programming_skills)
data$python_notebook <- as_factor(data$python_notebook)
# Remove incomplete applications
data <- data %>%
filter(Progress == 100)
data <- data %>%
distinct(email, .keep_all = TRUE)
data <- data %>%
distinct(email, .keep_all = TRUE)
eu_countries <- c(
"Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus",
"Czech Republic", "Denmark", "Estonia", "Finland", "France",
"Germany", "Greece", "Hungary", "Ireland", "Italy",
"Latvia", "Lithuania", "Luxembourg", "Malta", "Netherlands",
"Poland", "Portugal", "Romania", "Slovakia", "Slovenia",
"Spain", "Sweden", "United Kingdom"
)
# print sorted nationalities by freq.
sorted_table <- sort(table(data$nationality, useNA = "ifany"), decreasing = TRUE)
print(sorted_table)
#EU and non EU
data <- data %>%
mutate(eu = ifelse(nationality %in% eu_countries, 1, 0))
table(data$eu)
### Combine Keywords
data <- data %>%
unite("research_keywords", Q10_1:Q10_3, sep = ", ", na.rm = TRUE)
###### Eligible students
data$study_level <- as_factor(data$study_level)
table(data$study_level)
setwd("/Users/lucas/Documents/UNU-CDO/courses/policy brief")
data <- read_sav("Policy Brief Writing_March 20, 2025_09.15.sav", encoding = "UTF-8")
#rename important columns
data <- data %>% rename(
first_name = Q1_1,
last_name = Q1_2,
email = Q2_2,
gender = Q4,
age = Q19_1,
university = Q_1,
study_level = Q5,
programme = Q6_1,
study_level_other = Q5_9_TEXT,
nationality = Q3,
group_time = Q8,
brief_title = Q9
)
data$gender <- as_factor(data$gender)
data$nationality <- as_factor(data$nationality)
data$group_time <- as_factor(data$group_time)
# Remove incomplete applications
data <- data %>%
filter(Progress == 100)
data <- data %>%
distinct(email, .keep_all = TRUE)
africa <- c(
"Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi", "Cape Verde", "Cameroon",
"Central African Republic", "Chad", "Comoros", "Democratic Republic of the Congo", "Djibouti", "Equatorial Guinea", "Eritrea", "Swaziland", "Ethiopia", "Gabon", "Gambia", "Ghana",
"Guinea", "Guinea-Bissau", "Côte d'Ivoire", "Kenya", "Lesotho", "Liberia", "Libyan Arab Jamahiriya", "Madagascar",
"Malawi", "Mali", "Mauritania", "Mauritius", "Morocco", "Mozambique", "Namibia", "Niger",
"Nigeria", "Congo, Republic of the...", "Rwanda", "São Tomé and Príncipe", "Senegal", "Seychelles",
"Sierra Leone", "Somalia", "South Africa", "South Sudan", "Sudan", "United Republic of Tanzania", "Togo", "Tunisia",
"Uganda", "Zambia", "Zimbabwe"
)
europe <- c(
"Albania", "Andorra", "Austria", "Belarus", "Belgium", "Bosnia and Herzegovina", "Bulgaria",
"Croatia", "Czech Republic", "Denmark", "Estonia", "Finland", "France", "Germany",
"Greece", "Hungary", "Iceland", "Ireland", "Italy", "Kosovo", "Latvia", "Liechtenstein",
"Lithuania", "Luxembourg", "Malta", "Republic of Moldova", "Monaco", "Montenegro", "Netherlands",
"North Macedonia", "Norway", "Poland", "Portugal", "Romania", "Russian Federation", "San Marino",
"Serbia", "Slovakia", "Slovenia", "Spain", "Sweden", "Switzerland", "Ukraine",
"United Kingdom of Great Britain and Northern Ireland", "Vatican City"
)
eeuu_canada_puerto_rico <- c(
"United States of America", "Canada", "Puerto Rico"
)
oceania <- c(
"Australia", "Fiji", "Kiribati", "Marshall Islands", "Micronesia", "Nauru", "New Zealand",
"Palau", "Papua New Guinea", "Samoa", "Solomon Islands", "Tonga", "Tuvalu", "Vanuatu"
)
asia <- c(
"Afghanistan", "Armenia", "Azerbaijan", "Bangladesh", "Bhutan", "Brunei", "Cambodia",
"China", "Georgia", "India", "Indonesia", "Japan",
"Kazakhstan", "Kyrgyzstan", "Laos", "Malaysia", "Maldives", "Mongolia",
"Myanmar", "Nepal", "North Korea", "Pakistan", "Philippines", "Singapore", "South Korea", "Sri Lanka", "Tajikistan", "Thailand",
"Timor-Leste", "Turkmenistan", "Uzbekistan", "Viet Nam"
)
middle_east <- c("Iraq", "Israel", "Syrian Arab Republic", "Palestina", "Qatar", "United Arab Emirates",
"Yemen", "Lebanon", "Saudi Arabia", "Kuwait", "Jordan", "Iran", "Egypt", "Oman", "Turkey", "Bahrain",  "Cyprus")
south_america <- c(
"Argentina", "Bolivia", "Brazil", "Chile", "Colombia", "Ecuador", "Guyana", "Paraguay",
"Peru", "Suriname", "Uruguay", "Venezuela, Bolivarian Republic of..."
)
central_america_caribean_and_mexico <- c(
"Antigua and Barbuda", "Bahamas", "Barbados", "Belize", "Costa Rica", "Cuba", "Dominica",
"Dominican Republic", "El Salvador", "Grenada", "Guatemala", "Haiti", "Honduras", "Jamaica",
"Mexico", "Nicaragua", "Panama", "Saint Kitts and Nevis", "Saint Lucia",
"Saint Vincent and the Grenadines", "Trinidad and Tobago"
)
global_north <- c(
"Albania", "Andorra", "Austria", "Belarus", "Belgium", "Bosnia and Herzegovina", "Bulgaria",
"Croatia", "Czech Republic", "Denmark", "Estonia", "Finland", "France", "Germany",
"Greece", "Hungary", "Iceland", "Ireland", "Italy", "Kosovo", "Latvia", "Liechtenstein",
"Lithuania", "Luxembourg", "Malta", "Republic of Moldova", "Monaco", "Montenegro", "Netherlands",
"North Macedonia", "Norway", "Poland", "Portugal", "Romania", "Russian Federation", "San Marino",
"Serbia", "Slovakia", "Slovenia", "Spain", "Sweden", "Switzerland", "Ukraine",
"United Kingdom of Great Britain and Northern Ireland", "Vatican City", "Israel", "South Korea", "Japan", "China", "New Zealand", "Australia"
)
# print sorted nationalities by freq.
sorted_table <- sort(table(data$nationality, useNA = "ifany"), decreasing = TRUE)
print(sorted_table)
#EU and non EU
data <- data %>%
mutate(continent = case_when(
nationality %in% africa ~ "Africa",
nationality %in% europe ~ "Europe",
nationality %in% eeuu_canada_puerto_rico ~ "EEUU_Canada_Puerto_Rico",
nationality %in% oceania ~ "Oceania",
nationality %in% asia ~ "Asia",
nationality %in% south_america ~ "South America",
nationality %in% central_america_caribean_and_mexico ~ "Central America, Caribbean, and Mexico",
nationality %in% middle_east ~ "Middle East",
TRUE ~ "Unknown"
))
table(data$continent)
data <- data %>%
mutate(global_north = ifelse(nationality %in% global_north, 1, 0))
table(data$global_north)
###### Eligible students
data$study_level <- as_factor(data$study_level)
table(data$study_level)
eligible_students <- data
### Maastricht uni
maas_uni_mapping <- c("maastricht", "maastricht university", "unu-merit", "unu merit")
eligible_students <- eligible_students %>%
mutate(university = tolower(university)) %>%
rowwise() %>%
mutate(maastricht_uni = any(str_detect(university, maas_uni_mapping)) | str_detect(email, "maastricht")) %>%
ungroup()
table(eligible_students$maastricht_uni)
####MPP
mpp_mapping <- c("mpp", "public policy", "pubic policy")
# mpp == 1 if maastricht && programme name matches mapping
eligible_students <- eligible_students %>%
mutate(programme = tolower(programme)) %>%
rowwise() %>%
mutate(mpp = if_else(maastricht_uni == 1,
any(str_detect(programme, mpp_mapping)),
FALSE)) %>%
ungroup()
table(eligible_students$mpp)
# Study level filter
eligible_students <- eligible_students %>%
filter(study_level == "Master's degree" | study_level == "Bachelor's degree" | (maastricht_uni == 1))
eligible_students <- eligible_students %>%
filter(!nchar(brief_title) < 25)
### Filter non universities
non_unis <- c("na", "n/a", "none", "-", ".")
non_unis_obs <- eligible_students %>%
filter(university %in% non_unis)
View(data)
