---
title: "An introduction to Python programming"
format: html
kernel-mapping:
        python: python3
        r: knitr
---

```{r, echo=FALSE}
#| echo: false
library(reticulate)

use_miniconda("/Users/lucas/Library/r-miniconda-arm64", required = TRUE)
```

If you would like to follow the course with Python, we will offer some guidance. Bear in mind that the R and Python scripts are not meant to be exact replicas of one another, this is because the languages offer different data wrangling packages. However, you'll be able to get to the core of the course content.

With that said, let's start with the first difference. Python does not have a standard IDE like Rstudio for R. You can choose to work directly with the console REPL, with Jupyter notebooks or the IDE Visual Studio Code. We recommend to use VSCode, because it offers many functionalities for code-sharing and collaboration, and you can integrate AI-helpers to guide you throughout your coding tasks.

## Download VSCode and let's get started!

When you open the IDE VSCode, you'll receive a prompt to start a new project. Please make sure that when you do, you automatically save it in a dedicated folder. This will be relevant for many reasons, but the most pressing one is that you'll want to create a Virtual Environment before starting your script.

A **Python Virtual Environment**, also referred to as venv(s), is there to help us decouple and isolate package installs and manage them, independently from pkgs that are provided by the system or used by other projects. Although not strictly necessary, it is a good practice that will save us a few headaches in the future.

To create a virtual environment, once you've opened a new blank project in VSC, click on shift + cmd + P (or F1) to open the Command Palette (it should display from the top of VSC). Type "Python" and select create python terminal. In the terminal, type \`\` python -m venv venv '' and that's it! You'll notice the appearance of a venv folder in your dedicated project folder.

Now, you'll need to install and load the libraries you'll need for your project. To install them, use the python terminal you have opened. It should be displayed in the bottom of the working environment. Use the following (which should work with both Windows and Macbook, although Mac users can also use the Homebrew package manager):

```         
pip install pkg_name 
```

```{bash, include=FALSE}
pip install numpy
pip install pandas
pip install matplotlib
pip install scikit-learn
pip install tabulate
pip install statsmodels
pip install seaborn
pip install IPython
pip install graphviz
pip install skimpy
```

```{python}
# Now, we can load the libraries

import numpy as np # can be used to perform a wide variety of mathematical operations on arrays.
import pandas as pd # mainly used for data analysis and associated manipulation of tabular data in DataFrames
import matplotlib as mpl # comprehensive library for creating static, animated, and interactive visualizations in Python
import sklearn as sk #  implement machine learning models and statistical modelling.

```

With some basic libraries open, let's start with a brief introduction to Python programming. Like R, it is object oriented programming. But we call its elements differently. Python uses the following list of elements:

-   literals, variables, operators, delimiters, keywords, comments

```{python}
# Assigning VARIABLES with LITERALS
an_integer = 4 # integer
a_float = 4.5 # numeric/float
a_boolean = False # boolean, true or false
a_string = "Number of literals:"

print(a_string , an_integer)
```

You'll notice that what we call an object in R, is a variable in Python. Likewise, an element in R is now a literal in Python. We'll stop with the comparisons and proceed to work with Python language for now.

-   In Python, the data type is derived from the literal and does not have to be described explicitly.

-   You can overwrite a variable (i.e. an object) with new information.

e.g.

```{python}
an_integer = 7
print(an_integer)
x = np.linspace(-2,2,41)
print(x)
```

If you're working with a VSC script, you'll want to select a snippet of the script and use shift + enter to only run that snippet (and not the whole code chunk).

Some basics:

## Arithmetic operators

```{python}
5 + 1 
5*3 
6 == 100 # returns FALSE
6 != 100 # returns TRUE
20 / 2
2 ** 3 # 2 to the power of 3, ** is used for exponentiation

```

**Keywords and comments**

```{Python}

a_var = "This is a variable, which contains a string."
#and this is a comment about the string variable
print(a_var)


# lists: they are ordered arrays of elements, accesible via an index, e.g.


many_strings = ["Tolkien", "Orwell", "Austen"]
many_strings[0] # returns first element of list
# note that python starts counting from zero

many_strings.append("Mephistopheles")
print(many_strings) # we have succesfully appended an element to our list

many_strings.insert(2,"Shrek") # Insert element Shrek in position 3 of list (0,1,2)
print(many_strings)

# finally, sort the list... 
many_strings.sort()
print(many_strings)
# python orders alphabetically :) 

```

Let's use a toy dataset from the sklearn package to practice some basic estimations.

```{python}
 # import sklearn dataset
from sklearn.datasets import load_diabetes
 
 # load the  dataset, assign it to an object

diabetes = load_diabetes()
print(diabetes.DESCR) # DESCR is a description option from sklearn library. Be mindful of the Note!

```

Whilst there are many things you can do directly with the sklearn package options, the pandas library is the best for dataframe manipulation.

```{python}
# 1. convert the dataframe object into a pandas dataframe object
pandas_diabetes = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)

# now we can use the handy describe() and info() options from pandas
pandas_diabetes.describe() # returns descriptive statistics of variables in dataframe (df)
pandas_diabetes.info() # returns basic information about observations and variable names/types
len(pandas_diabetes) # returns the length of the object (aka the number of observations in df)
pandas_diabetes.head() # print the first 4 observations of the variables (glimpse of your df)

```

If you're working with VSC and you'd like to get a nice display of your data:

install the pkg 'tabulate' (pip install tabulate) using the terminal. You may have to open a new bash terminal (that is not using the Python REPL) to install packages. If that is the case (i.e. you could not pip install in the terminal you are using), you can 'split' the terminal using the interface split prompt.

```{python}
# this prints the dataframe nicely (but remember to only print the head/first observations, otherwise you display a large table!)
print(pandas_diabetes.head().to_markdown())

```

Some basic operations and estimation of a linear model:

*Indexig with pandas is done using the .iloc\[\] call.* To estimate a linear model (OLS), you'll need to split your data into a dependent Y and independent X variables.

Luckily for us, because the diabetes toy dataframe is from the sklearn library, you can use the target and data functions. For the same reason, we will use the diabetes dataset and not the pandas-converted dataset.

```{python}

pandas_diabetes.iloc[:,1] # print first column: Name: sex, Length: 442, dtype: float64
pandas_diabetes.iloc[:,1].mean() # get the mean of the first column: 1.2307902309192911e-17

# Linear Model (OLS), split data into dep Y and indep X variables

Y = diabetes.target # define targer/ Y var
X = diabetes.data # all remaining variables in the dataset are now X covariates

print(Y.shape, X.shape) # y is one column with 442 observations, X is 10 columns with 442 observations
print(Y) # prints all the vaues of Y
```

To estimate a linear model, we'll need t load the function from the sklearn library.

```{python}
from sklearn.linear_model import LinearRegression

lm = LinearRegression(fit_intercept=True).fit(X, Y)

#print model coefficients using pandas

print(lm.coef_) # displayed in the order of the column names
print(lm.intercept_) # model intercept = 152.133

# in a nicer way
column_names = pandas_diabetes.columns # to retrieve column names we should use the pandas dataset
coefficients = pd.concat([pd.DataFrame(column_names),pd.DataFrame(np.transpose(lm.coef_))], axis = 1)
print(coefficients) # displays variable name and it's estimated coefficient. 

```

The sklearn library will be our trusted Machine Learning ally. However, for general statistical analysis and easier to interpret output, there are other libraries. E.g.

```{python}
# an ever more intuitive output would look like this ->
# remember to pip install the libraries before importing them! And to do so in a different terminal (open a new bash terminal)
import statsmodels.api as sm
from scipy import stats

constant = sm.add_constant(X) # create a new X (covariate) object that includes all our variables and allow for this object to also display an estimated constant
est = sm.OLS(Y, constant) # estimate a linear regression model with dep Y and indep Xs (now constant)
lm_2 = est.fit() # create an object that contains all the models' parameters
print(lm_2.summary()) # print linear model parameters

```

This displayed output contains all the information we may need to interpret the suitability of our linear model.

We're at the end of this brief intro to Python. Notice that there's a forward structure throughout. We create an object X, which we define to be of class, say, pandas. It's class will let us use that class/library's functions by calling them after a dot: X.summary() will display a summary of the X object. \*\* Visualisation with matplotlib \*\*

```{python}
import matplotlib.pyplot as plt

pandas_diabetes.head() # to remember our variables

bmi = pandas_diabetes.iloc[:,2] # select and store bmi variable
age = pandas_diabetes.iloc[:,0] # select and store age variable

plt.hist(bmi)
plt.show() 

plt.clf()

plt.scatter(age,bmi) # order is x,y
plt.show()

# let's add some elements#add line of best fit to plot

# find line of best fit
a, b = np.polyfit(age, bmi, 1)

# add the points to the plot
plt.scatter(age,bmi) # order is x,y
# add the line and then display
plt.plot(age, a*age+b, color='red', linestyle='--', linewidth=2)
plt.show()
```

## Defining functions and loops

The last useful tip before we begin to use Python in earnest, is to remember that we can define functions or use loops (general flow control) to help us with our data wrangling:

```{python}
# for loops, to iterate over some length and repeat an operation, e.g.
count = 0 # initialize empty variable
nums = [1,2,3,4,5,6,7,8,9,10]

for i in nums:
    count += i
    
print(f"We have a total sum of: {count}.")

# we've essentially set a counter: 1 + 2 + 3 + 4  + ... 10 = 55!

if 101 == 100: 
    print("Hello, 5!")
elif 101 > 100:
    print("Much gold!")

# if logical statement is true, print(), else if new logical statement is true, print()

# defining functions: lottery draw!


def French_talk(name,age):
    print("Je m'appelle", name)
    print("Mon âge est", age)
    
French_talk("Saruman",1000)
```

You can download the R script by clicking on the button below.

<a class="btn btn-primary" download href="scripts/Intro2Python.py"> Download Intro to Python script </a>
