---
title: "An introduction to Python programming"
format: html
---

```{r, setup, include = FALSE}
library(reticulate)
#use_python("/Users/michellegonzalez/.pyenv/versions/3.9.18/bin/python3.9", required = T)
use_miniconda("/Users/lucas/Library/r-miniconda-arm64", required = T)

```
If you would like to follow the course with Python, we will offer some guidance. Bear in mind that the R and Python scripts are not meant to be exact replicas of one another, this is because the languages offer different data wrangling packages. However, you'll be able to get to the core of the course content.

With that said, let's start with the first difference. Python does not have a standard IDE like Rstudio for R. You can choose to work directly with the console REPL, with Jupyter notebooks or the IDE Visual Studio Code. We recommend to use VSCode, because it offers many functionalities for code-sharing and collaboration, and you can integrate AI-helpers to guide you throughout your coding tasks. 

**Download VSCode and let's get started! **

When you open the IDE VSCode, you'll receive a prompt to start a new project.
Please make sure that when you do, you automatically save it in a dedicated folder. This will be relevant for many reasons, but the most pressing one is that you'll want to create a Virtual Environment before starting your script. 

A **Python Virtual Environment**, also referred to as venv(s), is there to help us decouple and isolate package installs and manage them, independently from pkgs that are provided by the system or used by other projects. Although not strictly necessary, it is a good practice that will save us a few headaches in the future. 

To create a virtual environment, once you've opened a new blank project in VSC, click on shift + cmd + P (or F1) to open the Command Palette (it should display from the top of VSC). Type "Python" and select create python terminal. In the terminal, type `` python -m venv venv '' and that's it! You'll notice the appearance of a venv folder in your dedicated project folder.

Now, you'll need to install and load the libraries you'll need for your project. To install them, use the python terminal you have opened. It should be displayed in the bottom of the working environment. Use the following (which should work with both Windows and Macbook, although Mac users can also use the general brew installer): 

`` pip install pkg_name '' 
